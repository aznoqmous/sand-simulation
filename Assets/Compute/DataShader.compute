#pragma kernel CSMain

const float2 DIR_UP = float2(0.0, 1.0);
const float2 DIR_DOWN = float2(0.0, -1.0);
const float2 DIR_LEFT = float2(-1.0, 0.0);
const float2 DIR_RIGHT = float2(1.0, 0.0);

struct Particle {
    float2 position;
    float2 real_position;
    float2 direction;
    float speed;
    int type;
    float idle_time;
    float birth;
    float wetness;
    float power;
};

struct ParticleType {
    float4 color;
    int movement_type;
    float dispersion;
    int is_solid;
    int is_flammable;
    int is_abrasive;
    float share_wetness;
    int is_wet;
    int burns;
    int corrosive;
    float life_time;
    int on_death_emit;
    float on_death_spawn_chance;
};


float Size;
float Time;
float DeltaTime;
float Gravity;
bool MouseDown;
bool DrawBounds;
int MouseType;
int BrushSize;
float2 ChunkPosition;
float2 MousePosition;
float IdleTime;
int Step;

bool IsSave;
bool IsLoad;

RWTexture2D<float4> Result;
RWTexture2D<float4> ColliderTexture;

RWStructuredBuffer<Particle> Particles;
RWStructuredBuffer<int> States;

RWStructuredBuffer<Particle> LeftChunkParticles;
RWStructuredBuffer<Particle> TopChunkParticles;
RWStructuredBuffer<Particle> BottomChunkParticles;
RWStructuredBuffer<Particle> RightChunkParticles;

StructuredBuffer<ParticleType> Types;

int color_to_type(float4 input_color){
    if(input_color.w == 1) return 1; // wood
    int type = input_color.w * 64;
    return min(type, 7); // default to earth
}
float4 type_to_color(int type){
    float4 color = Types[type].color;
    //return color;
    return float4(color.xyz, type / 64.0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(IsSave == 1){
        Result[id.xy] = type_to_color(Particles[id.x * Size + id.y].type);
    }
    if(IsLoad == 1){
        Particles[id.x * Size + id.y].type = color_to_type(Result[id.xy]);
    }
}

