#pragma kernel CSMain
#pragma use_dxc 

const float2 DIR_UP = float2(0.0, 1.0);
const float2 DIR_DOWN = float2(0.0, -1.0);
const float2 DIR_LEFT = float2(-1.0, 0.0);
const float2 DIR_RIGHT = float2(1.0, 0.0);

struct Particle {
    float2 position;
    float2 real_position;
    float2 direction;
    float speed;
    int type;
    float idle_time;
    float birth;
    float wetness;
    float power;
};

struct ParticleType {
    float4 color;
    int movement_type;
    float dispersion;
    int is_solid;
    int is_flammable;
    int is_abrasive;
    float share_wetness;
    int is_wet;
    int burns;
    int corrosive;
    float life_time;
    int on_death_emit;
    float on_death_spawn_chance;
};

float Size;
float Time;
float DeltaTime;
float Gravity;
bool MouseDown;
bool DrawBounds;
int MouseType;
int BrushSize;
float2 ChunkPosition;
float2 MousePosition;
float IdleTime;
int Step;

RWTexture2D<float4> Result;
RWTexture2D<float4> ColliderTexture;

RWStructuredBuffer<Particle> Particles;
RWStructuredBuffer<int> States;

RWStructuredBuffer<Particle> LeftChunkParticles;
RWStructuredBuffer<Particle> TopChunkParticles;
RWStructuredBuffer<Particle> BottomChunkParticles;
RWStructuredBuffer<Particle> RightChunkParticles;

StructuredBuffer<ParticleType> Types;

void increment_solid_particles_count(){
    InterlockedAdd(States[5], 1);
}
void increment_particles_count(){
    InterlockedAdd(States[6], 1);
}

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

float2 floor2(float2 movement){
    return float2(floor(movement.x), floor(movement.y));
}

float2 get_movement(float2 mov){
    if(abs(mov.x) > abs(mov.y)) return abs(mov.x) >= 1 ? float2(sign(mov.x),  0.0) : float2(0.0, 0.0);
    return abs(mov.y) >= 1 ? float2(0.0, sign(mov.y)) : float2(0.0, 0.0);
}

float fract(float x)
{
    return x - floor(x);
}

float rand(float2 c){
    return fract(sin(dot(c.xy, float2(12.9898 + Time, 78.233))) * 43758.5453 * (Time % 2.0));
}

void draw(float2 position, float4 color){
    Result[position] = color;
}

int position_to_id(float2 position){
    return position.x * Size + position.y;
}
int position_to_id(float x, float y){
    return x * Size + y;
}

void update_particle(float2 position, Particle p)
{
    if(position.y < 0.0) BottomChunkParticles[position_to_id(position.x, (Size - 1.0))] = p;
    else if(position.y > Size - 1.0) TopChunkParticles[position_to_id(position.x, 0.0)] = p;
    else if(position.x < 0.0) LeftChunkParticles[position_to_id((Size - 1.0), position.y)] = p;
    else if(position.x > Size - 1.0) RightChunkParticles[position_to_id(0, position.y)] = p;
    else Particles[position.x * Size + position.y] = p;
}

void update_particle(Particle p){
    update_particle(p.position, p);
}

Particle get_particle(float2 position){
    if(position.y < 0.0) return BottomChunkParticles[position_to_id(position.x, (Size - 1.0))];
    if(position.y > Size - 1.0) return TopChunkParticles[position_to_id(position.x, 0.0)];
    if(position.x < 0.0) return LeftChunkParticles[position_to_id((Size - 1.0), position.y)];
    if(position.x > Size - 1.0) return RightChunkParticles[position_to_id(0, position.y)];
    return Particles[position.x * Size + position.y];
}
bool is_idle(Particle p){
    return p.idle_time >= IdleTime;
}
bool is_idle(float2 pos){
    return is_idle(get_particle(pos));
}

bool is_empty(float2 position){
    return get_particle(position).type == 0;
}

float get_noise(float2 input){
    return unity_gradientNoise(input) * 0.5 + unity_gradientNoise(input / 3.5) * 0.5;
}

ParticleType get_type(Particle p){
    return Types[p.type];
}
ParticleType get_type(float2 position){
    return Types[get_particle(position).type];
}
void draw_particle(Particle p){
    Result[p.position] = float4(0.0, 0.0, 0.0, 0.0);
    if(p.type == 0) return;
    
    float4 color = Types[p.type].color;
    
    // if(is_idle(p)){
    //     Result[p.position] = float4(0, 1, 0, 1);
    //     return;
    // }
    
    float noise = 1.0;
    if(p.type == 1) { // stone
        noise = get_noise((ChunkPosition * Size + p.position + p.type * Size) / 2.0);
    }
    else if(p.type == 3) { // water
        noise = get_noise((ChunkPosition * Size + p.position + p.type * Size) / 2.0 + float2(Time, Time));
        color.w = 0.5;
    }
    else if(get_type(p).burns == 1) { // fire
        noise = get_noise((ChunkPosition * Size + p.position + p.type * Size) / 2.0 - float2(Time, Time));
    }
    else {
        noise = get_noise((ChunkPosition * Size + p.position + p.type * Size) / 2.0);
    }
    Result[p.position] = color * (float4(1.0, 1.0, 1.0, 1.0) * (noise * 0.6 + 1.0));
    if(!get_type(p).is_wet) Result[p.position] *= 1.0 - p.wetness / 2.0;
    if(p.power > 0) Result[p.position] *= 1 + p.power / 2.0;
    // if(p.power > 0) Result[p.position] = float4(p.power, 0, 0, 1);
}



void wake_particle_chunk(float2 position){
    if(position.x < 0.0) InterlockedAdd(States[1], 1);
    else if(position.y > Size - 1.0) InterlockedAdd(States[2], 1);
    else if(position.x > Size - 1.0) InterlockedAdd(States[3], 1);
    else if(position.y < 0.0) InterlockedAdd(States[4], 1);
    else InterlockedAdd(States[0], 1);
}

void wake_particle(float2 position){
    Particle p = get_particle(position);
    if(p.type == 0) return;
    p.idle_time = 0;
    wake_particle_chunk(position);
    update_particle(position, p);
}

void wake_neighbors(float2 position){
    wake_particle(position + float2(0, -1));
    wake_particle(position + float2(0, 1));
    wake_particle(position + float2(-1, 0));
    wake_particle(position + float2(1, 0));
}

void erase_particle(Particle p){
    Result[p.position] = float4(0.0, 0.0, 0.0, 0.0);
}
void delete_particle(float2 position){
    if(position.y < 0.0) BottomChunkParticles[position_to_id(position.x, (Size - 1.0))].type = 0;
    else if(position.y > Size - 1.0) TopChunkParticles[position_to_id(position.x, 0.0)].type = 0;
    else if(position.x < 0.0) LeftChunkParticles[position_to_id((Size - 1.0), position.y)].type = 0;
    else if(position.x > Size - 1.0) RightChunkParticles[position_to_id(0, position.y)].type = 0;
    else Particles[position.x * Size + position.y].type = 0;
}
void delete_particle(Particle p){
    if((rand(p.position) * 1000.0) % 100 / 100 < get_type(p).on_death_spawn_chance) p.type = get_type(p).on_death_emit;
    else p.type = 0;
    p.birth = Time;
    update_particle(p);
}


void move_particle(inout Particle particle, float2 movement){
    float2 targetPosition = particle.position + movement;
    float2 originalPosition = particle.position;
    int targetId = targetPosition.x * Size + targetPosition.y;
    int currentId = particle.position.x * Size + particle.position.y;

    wake_particle(targetPosition);
    
    Particle targetParticle = Particles[targetId];
    
    if(targetPosition.y < 0.0){
        targetPosition.y = Size - 1.0;
        targetId = position_to_id(targetPosition);
        targetParticle = BottomChunkParticles[targetId];
        particle.position = targetParticle.position;
        particle.real_position = particle.position;
        BottomChunkParticles[targetId] = particle;
    }
    else if(targetPosition.y > Size - 1.0){
        targetPosition.y = 0.0;
        targetId = position_to_id(targetPosition);
        targetParticle = TopChunkParticles[targetId];
        particle.position = targetParticle.position;
        particle.real_position = particle.position;
        TopChunkParticles[targetId] = particle;
    }
    else if(targetPosition.x < 0.0){
        targetPosition.x = Size - 1.0;
        targetId = position_to_id(targetPosition);
        targetParticle = LeftChunkParticles[targetId];
        particle.position = targetParticle.position;
        particle.real_position = particle.position;
        LeftChunkParticles[targetId] = particle;
    }
    else if(targetPosition.x > Size - 1.0){
        targetPosition.x = 0.0;
        targetId = position_to_id(targetPosition);
        targetParticle = RightChunkParticles[targetId];
        particle.position = targetParticle.position;
        particle.real_position = particle.position;
        RightChunkParticles[targetId] = particle;
    }
    else {
        particle.position = targetPosition;
        particle.real_position = particle.position;
        Particles[targetId] = particle;
    }

    targetParticle.position = originalPosition;
    targetParticle.real_position = originalPosition;
    Particles[currentId] = targetParticle;

}

void move_toward(inout Particle p, float2 direction, float speed=5.0){
    p.direction += direction * DeltaTime * speed;
    p.direction = normalize(p.direction);
    p.speed += speed * DeltaTime;
    update_particle(p);
}

void handle_particle_movement(inout Particle p){
    p.speed *= 1 - DeltaTime;

    if(p.speed < 0.1) p.idle_time += DeltaTime;
    else {
        p.real_position += p.direction * p.speed * DeltaTime * 10.0;
        wake_particle(p.position);
        wake_neighbors(p.position);
    }

    update_particle(p.position, p);
    
    if(is_idle(p)) return;

    float2 mov = get_movement(p.real_position - p.position);
    
    if(mov.x == 0.0 && mov.y == 0.0) return;
    
    if(!is_empty(p.position + mov)){
        p.real_position = p.position;
        p.direction *= float2(1 - abs(mov.x), 1 - abs(mov.y));
        // p.direction = float2(0.0, 0.0);
        p.speed *= 1.0 - 1.0 / (get_type(p).dispersion + 1.0);
        update_particle(p.position, p);
        return;
    }
    
    move_particle(p, mov);
}

bool handle_sand(inout Particle p)
{
    if(is_empty(p.position + float2(0.0, -1.0))) {
        move_toward(p, float2(0.0, -1.0), Gravity);
        return true;
    }
    else {
        if (is_empty(p.position + float2(1, 0)) && is_empty(p.position + float2(1, -1)))
        {
            move_toward(p, float2(1.0, 0.0), Gravity);
            return true;
        }
        else if (is_empty(p.position + float2(-1, 0)) && is_empty(p.position + float2(-1, -1)))
        {
            move_toward(p, float2(-1.0, 0.0), Gravity);
            return true;
        }
    }

    return false;
}

bool handle_water(inout Particle p){

    if(handle_sand(p)) return true;
    if (int(rand(p.position) * 100000.0) % 2 == 0 && is_empty(p.position + float2(1, 0)))
    {
        move_toward(p, float2(1.0, 0.0), Gravity);
        return true;
    }
    if (is_empty(p.position + float2(-1, 0)))
    {
        move_toward(p, float2(-1.0, 0.0), Gravity);
        return true;
    }
    if (is_empty(p.position + float2(1, 0)))
    {
        move_toward(p, float2(1.0, 0.0), Gravity);
        return true;
    }

    return false;
}

void burn(float2 position, Particle particle){
    if(rand(position) < DeltaTime) return;
    Particle p = get_particle(position);
    p.type = particle.type; // fire
    p.birth = Time;
    update_particle(position, p);
}
void burns_neighbors(Particle p){
    if(get_type(p.position + float2(1.0, 0.0)).is_flammable == 1) burn(p.position + float2(1.0, 0.0), p);
    if(get_type(p.position + float2(-1.0, 0.0)).is_flammable == 1) burn(p.position + float2(-1.0, 0.0), p);
    if(get_type(p.position + float2(0.0, 1.0)).is_flammable == 1) burn(p.position + float2(0.0, 1.0), p);
    if(get_type(p.position + float2(0.0, -1.0)).is_flammable == 1) burn(p.position + float2(0.0, -1.0), p);
}
void corrosive(float2 position, Particle particle){
    if((rand(position) * 10000000.0) % 100 > 1) return;
    Particle p = get_particle(position);
    delete_particle(position);
    delete_particle(particle);
}
void corrosive_neighbors(Particle p){
    if(get_type(p.position + float2(1.0, 0.0)).is_abrasive) corrosive(p.position + float2(1.0, 0.0), p);
    if(get_type(p.position + float2(-1.0, 0.0)).is_abrasive) corrosive(p.position + float2(-1.0, 0.0), p);
    if(get_type(p.position + float2(0.0, 1.0)).is_abrasive) corrosive(p.position + float2(0.0, 1.0), p);
    if(get_type(p.position + float2(0.0, -1.0)).is_abrasive) corrosive(p.position + float2(0.0, -1.0), p);
}
bool handle_gas(inout Particle p)
{
    if(is_empty(p.position + float2(0.0, 1.0))) {
        move_toward(p, float2(0.0, 1.0), Gravity);
        return true;
    }
    else {
        if (is_empty(p.position + float2(1, 0)) && is_empty(p.position + float2(1, 1)))
        {
            move_toward(p, float2(1.0, 0.0), Gravity);
            return true;
        }
        else if (is_empty(p.position + float2(-1, 0)) && is_empty(p.position + float2(-1, 1)))
        {
            move_toward(p, float2(-1.0, 0.0), Gravity);
            return true;
        }
    }
    return false;
}
bool handle_fire(inout Particle p){
    if(handle_gas(p)) return true;
    if (int(rand(p.position) * 100000.0) % 2 == 0 && is_empty(p.position + float2(1, 0)))
    {
        move_toward(p, float2(1.0, 0.0), Gravity);
        return true;
    }
    if (is_empty(p.position + float2(-1, 0)))
    {
        move_toward(p, float2(-1.0, 0.0), Gravity);
        return true;
    }
    if (is_empty(p.position + float2(1, 0)))
    {
        move_toward(p, float2(1.0, 0.0), Gravity);
        return true;
    }

    return false;
}

void soak(float2 position, float value, Particle particle){
    if(value == 0) return;
    Particle p = get_particle(position);
    if(value < p.wetness) return;
    p.wetness = lerp(p.wetness, value, DeltaTime * get_type(p).share_wetness);
    update_particle(position, p);
    wake_particle(particle.position);
    wake_neighbors(particle.position);
}

void soak_neighbors(inout Particle p, float value){
    soak(p.position + float2(1.0, 0.0), value, p);
    soak(p.position + float2(-1.0, 0.0), value, p);
    soak(p.position + float2(0.0, 1.0), value, p);
    soak(p.position + float2(0.0, -1.0), value, p);
}
int count_neighbor_of_type(float2 position, int type){
    int total = 0;
    if(get_particle(position + float2(1.0, 0.0)).type == type) total++;
    if(get_particle(position + float2(-1.0, 0.0)).type == type) total++;
    if(get_particle(position + float2(0.0, 1.0)).type == type) total++;
    if(get_particle(position + float2(0.0, -1.0)).type == type) total++;
    return total;
}
void grow_root(float2 position, Particle p){
    Particle b = get_particle(position);
    if(b.type != 8 || b.wetness < 0.1) return;
    if(count_neighbor_of_type(position, 9) > 1) return;
    if(rand(position) > b.wetness * DeltaTime * get_noise(position / 5.0)) return;

    b.type = 9;
    b.direction = p.position - position;
    update_particle(position, b);
}
void grow_roots(Particle p){
    grow_root(p.position + float2(1.0, 0.0), p);
    grow_root(p.position + float2(-1.0, 0.0), p);
    grow_root(p.position + float2(0.0, 1.0), p);
    grow_root(p.position + float2(0.0, -1.0), p);
}


void transfer_power(float2 position, inout Particle p){
    Particle pb = get_particle(position);
    pb.power = min(1.0, p.power + pb.power);
    update_particle(position, pb);
    wake_particle(position);
    p.power = 0;
    update_particle(p);
}
void transfer_power(inout Particle p){
    float2 position = p.position + p.direction;
    transfer_power(position, p);
}


void handle_wood(Particle p){
    if(p.power >= 1) {
        p.power = 0;
        update_particle(p);
    }
    // if(get_particle(p.position + float2(1.0, 0.0)).type == 4) transfer_power(p.position + float2(1.0, 0.0), p);
    // if(get_particle(p.position + float2(-1.0, 0.0)).type == 4) transfer_power(p.position + float2(-1.0, 0.0), p);
    // if(get_particle(p.position + float2(0.0, 1.0)).type == 4) transfer_power(p.position + float2(0.0, 1.0), p);
    // if(get_particle(p.position + float2(0.0, -1.0)).type == 4) transfer_power(p.position + float2(0.0, -1.0), p);
}

void handle_root(Particle p){
    if(rand(p.position) < DeltaTime / 1000.0) {
        transfer_power(p);
        return;
    }

    int earth_ns = count_neighbor_of_type(p.position, 8);
    if(earth_ns < 3) {
        if(earth_ns > 1) grow_roots(p);
        return;
    }

    if(p.power <= 0) grow_roots(p);
    p.power += DeltaTime;
    p.power = min(1.0, p.power);
    wake_particle(p.position);
    update_particle(p);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Alternate particle direction on each frame
    uint3 current_step = id.xyz;
 
    // avoid multithread overlaps / update ~ 4 times slower
    // if(Step == 0 && !(current_step.x % 2 == 0 && current_step.y % 2 == 0)) return;
    // if(Step == 1 && !(current_step.x % 2 == 1 && current_step.y % 2 == 0)) return;
    // if(Step == 2 && !(current_step.x % 2 == 0 && current_step.y % 2 == 1)) return;
    // if(Step == 3 && !(current_step.x % 2 == 1 && current_step.y % 2 == 1)) return;

    Particle p = Particles[current_step.x * Size + current_step.y];
    ParticleType type = get_type(p);

    ColliderTexture[p.position] = float4(0.0, 0.0, 0.0, 0.0);
    
    if(distance(MousePosition, p.position) < BrushSize && MouseDown){
        p.type = MouseType;
        p.idle_time = 0;
        p.birth = Time;
        p.wetness = 0;
        update_particle(p);
        wake_neighbors(p.position);
    }
    

    if(p.type == 0) {
        erase_particle(p);

        /**
        * Show chunk bounds
        **/
        if(DrawBounds){
            //Result[current_step.xy] = float4(1,1,1,0.1);
            if(current_step.x == 0) Result[current_step.xy] = float4(1,1,1,1);
            if(current_step.x >= (Size - 1.0)) Result[current_step.xy] = float4(1,1,1,1);
            if(current_step.y == 0) Result[current_step.xy] = float4(1,1,1,1);
            if(current_step.y >= (Size - 1.0)) Result[current_step.xy] = float4(1,1,1,1);
        }
        return;
    }

    if(type.life_time > 0 && Time - p.birth > type.life_time)
    {
        delete_particle(p);
        return;
    }

    if(p.wetness > 0){
        p.wetness = lerp(p.wetness, 0, DeltaTime / 10.0);
        update_particle(p);
    }

    draw_particle(p);
    increment_particles_count();

    if(p.type == 9){ // skip 1/2 root
        if(Step % 2 == (p.position.x + p.position.y) % 2) return;
    }

    if(is_idle(p)){
        if(type.is_solid == 1) {
            ColliderTexture[p.position] = float4(1.0, 1.0, 1.0, 1.0);
            increment_solid_particles_count();
        }
        return;
    }
    
    if(type.movement_type == 0 && p.wetness == 0){
        p.idle_time = IdleTime;
        update_particle(p.position, p);
    }
    if(type.movement_type == 1){
        handle_sand(p);
    }
    if(type.movement_type == 2){
        handle_water(p);
    }
    if(type.movement_type == 3){ // gas
        handle_gas(p);
    }
    if(type.movement_type == 4){ // fire
        handle_fire(p);
    }
    if(type.movement_type == 5){ // wood
        p.idle_time = 0;
        update_particle(p);
        handle_wood(p);
        grow_roots(p);
    }
    if(type.movement_type == 6){ // root
        p.idle_time = 0;
        update_particle(p);
        handle_root(p);
    }
    if(p.type == 5){  // fire
        if(p.speed > 30.0 || is_idle(p)){
            delete_particle(p);
            return;
        }
        ParticleType toptype = get_type(p.position + float2(0, 1));
        if(!is_empty(p.position + float2(0, 1)) && !toptype.is_flammable && !toptype.burns){
            delete_particle(p);
            return;
        }
    }
    if(type.burns == 1){
        burns_neighbors(p);
    }
    if(type.corrosive == 1){
        corrosive_neighbors(p);
    }
    if(type.is_wet == 1){
        soak_neighbors(p, 1.0);
    }
    if(type.share_wetness > 0){
        soak_neighbors(p, p.wetness);
    }
    if(type.movement_type != 0) handle_particle_movement(p);
}

